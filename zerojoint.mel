proc int vfySelection () {
  $selection = `ls -sl`;
  $jointselection = `ls -sl -exactType "joint"`;
  if ( size($selection) > 1 ) {
    print "More than one object selected.\n";
  } else if ( size($selection) == 0 ) {
    print "No object selected.\n";
  } else if ( size($jointselection) != 1 ) {
    print "Selection is not a joint.\n";
  } else {
    return 1;
  }
  return 0;
}

proc parentGroup ( string $groupEx, string $targetEx ) {
  // need to check for and handle multiple parents
  $tExParent = `listRelatives -p $targetEx`;
  if ( size($tExParent) == 0 ) {
    parent -w $groupEx;
  } else if (size($tExParent) > 1) {
    print "More than one parent.\n";
  } else {
    parent $groupEx $tExParent;
  }
}

proc makeGroup ( string $targetJoint ) {
  $groupName = $targetJoint + "_zero";
  group -em -n $groupName;
  parent $groupName $targetJoint;
  setAttr ($groupName + ".translate") 0 0 0;
  setAttr ($groupName + ".rotate") 0 0 0;
  parentGroup($groupName,$targetJoint);
  parent $targetJoint $groupName;
  float $grpRotX = getAttr ($groupName + ".rotateX");
  float $grpRotY = getAttr ($groupName + ".rotateY");
  float $grpRotZ = getAttr ($groupName + ".rotateZ");
  float $tgtRotX = getAttr ($targetJoint + ".rotateX");
  float $tgtRotY = getAttr ($targetJoint + ".rotateY");
  float $tgtRotZ = getAttr ($targetJoint + ".rotateZ");
  setAttr ($groupName + ".rotate")
    ($grpRotX + $tgtRotX)
    ($grpRotY + $tgtRotY)
    ($grpRotZ + $tgtRotZ);
  setAttr ($targetJoint + ".rotate") 0 0 0;
}

global proc zeroJoint() {
  if ( vfySelection() == 1) {
    $parentJoint = `ls -sl`;
    makeGroup($parentJoint[0]);
    $childrenJoints = `listRelatives -type joint -ad $parentJoint`;
    for ( $childJoint in $childrenJoints ) makeGroup($childJoint);
  }
}
